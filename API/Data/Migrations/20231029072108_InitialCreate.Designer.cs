// <auto-generated />
using System;
using Hospital.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HospitalApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231029072108_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClinicNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("clinics", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.ClinicDoctor", b =>
                {
                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.HasKey("ClinicId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("clinic_doctor", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.CustomItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("Units")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("custom_items", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.DoctorService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DoctorPercentage")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("HospitalPercentage")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("doctor_services", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.DoctorWorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_working_hours", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ImageDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Organ")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InventoryItemSpecialityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemSpecialityId");

                    b.ToTable("inventory_items", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("AppointmentTypePrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("CustomItemsTotalPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime>("FinalizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAfterDiscount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalRemaining")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.InvoiceDoctorService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("ServiceSoldPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalDisposablesPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorServiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("invoice_doctor_service", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.InvoiceDoctorServiceSupplyOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("InvoiceDoctorServiceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplyOrderId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceDoctorServiceId");

                    b.HasIndex("SupplyOrderId");

                    b.ToTable("invoice_doctor_service_supply_orders", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.InvoiceMedicine", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<string>("DosageAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("InvoiceId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("invoice_medicine", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("medicines", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.SellOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IncludeExpiredItems")
                        .HasColumnType("boolean");

                    b.Property<int?>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("SoldTo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("sell_orders", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.SellOrderConsumesSupplyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.Property<int?>("SellOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplyOrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.HasIndex("SellOrderId");

                    b.HasIndex("SupplyOrderId");

                    b.ToTable("sell_order_consumes_supply_orders", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceSpecialityId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSpecialityId");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.ServiceInventoryItem", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityNeeded")
                        .HasColumnType("integer");

                    b.HasKey("ServiceId", "InventoryItemId");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("service_inventory_items", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.SupplyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsumedQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("supply_orders", (string)null);
                });

            modelBuilder.Entity("HospitalApp.Models.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentSpecialityId")
                        .HasColumnType("integer");

                    b.Property<string>("CreationNote")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Diagnoses")
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentSpecialityId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("HospitalApp.Models.Entities.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("specialities", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("asp_net_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("webapi.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_roles", (string)null);
                });

            modelBuilder.Entity("webapi.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DoctorSpecialityId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("PriceRevisit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceVisit")
                        .HasColumnType("numeric");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecialityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_users", (string)null);
                });

            modelBuilder.Entity("webapi.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("asp_net_user_roles", (string)null);
                });

            modelBuilder.Entity("API.Models.Entities.ClinicDoctor", b =>
                {
                    b.HasOne("API.Models.Entities.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Entities.AppUser", "Doctor")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("API.Models.Entities.CustomItem", b =>
                {
                    b.HasOne("API.Models.Entities.Invoice", "Invoice")
                        .WithMany("CustomItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("API.Models.Entities.DoctorService", b =>
                {
                    b.HasOne("webapi.Entities.AppUser", "Doctor")
                        .WithMany("DoctorServices")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Service", "Service")
                        .WithMany("DoctorServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("API.Models.Entities.DoctorWorkingHours", b =>
                {
                    b.HasOne("webapi.Entities.AppUser", "Doctor")
                        .WithMany("DoctorWorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("API.Models.Entities.Image", b =>
                {
                    b.HasOne("webapi.Entities.AppUser", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.InventoryItem", b =>
                {
                    b.HasOne("HospitalApp.Models.Entities.Speciality", "InventoryItemSpeciality")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryItemSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItemSpeciality");
                });

            modelBuilder.Entity("API.Models.Entities.InvoiceDoctorService", b =>
                {
                    b.HasOne("API.Models.Entities.DoctorService", "DoctorService")
                        .WithMany("InvoiceDoctorService")
                        .HasForeignKey("DoctorServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Models.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDoctorService")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorService");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("API.Models.Entities.InvoiceDoctorServiceSupplyOrders", b =>
                {
                    b.HasOne("API.Models.Entities.InvoiceDoctorService", "InvoiceDoctorService")
                        .WithMany("InvoiceDoctorServiceSupplyOrders")
                        .HasForeignKey("InvoiceDoctorServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Models.Entities.SupplyOrder", "SupplyOrder")
                        .WithMany("InvoiceDoctorServiceSupplyOrders")
                        .HasForeignKey("SupplyOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("InvoiceDoctorService");

                    b.Navigation("SupplyOrder");
                });

            modelBuilder.Entity("API.Models.Entities.InvoiceMedicine", b =>
                {
                    b.HasOne("API.Models.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceMedicines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Medicine", "Medicine")
                        .WithMany("InvoiceMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("API.Models.Entities.SellOrder", b =>
                {
                    b.HasOne("API.Models.Entities.InventoryItem", "InventoryItem")
                        .WithMany("SellOrders")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("API.Models.Entities.SellOrderConsumesSupplyOrder", b =>
                {
                    b.HasOne("API.Models.Entities.SellOrder", "SellOrder")
                        .WithMany("SellOrderConsumesSupplyOrders")
                        .HasForeignKey("SellOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Models.Entities.SupplyOrder", "SupplyOrder")
                        .WithMany("SellOrderConsumesSupplyOrders")
                        .HasForeignKey("SupplyOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SellOrder");

                    b.Navigation("SupplyOrder");
                });

            modelBuilder.Entity("API.Models.Entities.Service", b =>
                {
                    b.HasOne("HospitalApp.Models.Entities.Speciality", "ServiceSpeciality")
                        .WithMany("Services")
                        .HasForeignKey("ServiceSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceSpeciality");
                });

            modelBuilder.Entity("API.Models.Entities.ServiceInventoryItem", b =>
                {
                    b.HasOne("API.Models.Entities.InventoryItem", "InventoryItem")
                        .WithMany("ServiceInventoryItems")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Service", "Service")
                        .WithMany("ServiceInventoryItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("API.Models.Entities.SupplyOrder", b =>
                {
                    b.HasOne("API.Models.Entities.InventoryItem", "InventoryItem")
                        .WithMany("SupplyOrders")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("HospitalApp.Models.Entities.Appointment", b =>
                {
                    b.HasOne("HospitalApp.Models.Entities.Speciality", "AppointmentSpeciality")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Entities.AppUser", "Doctor")
                        .WithMany("BookedWithAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Invoice", "Invoice")
                        .WithOne("Appointment")
                        .HasForeignKey("HospitalApp.Models.Entities.Appointment", "InvoiceId");

                    b.HasOne("webapi.Entities.AppUser", "Patient")
                        .WithMany("BookedAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppointmentSpeciality");

                    b.Navigation("Doctor");

                    b.Navigation("Invoice");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("webapi.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("webapi.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("webapi.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("webapi.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("webapi.Entities.AppUser", b =>
                {
                    b.HasOne("HospitalApp.Models.Entities.Speciality", "DoctorSpeciality")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorSpecialityId");

                    b.Navigation("DoctorSpeciality");
                });

            modelBuilder.Entity("webapi.Entities.AppUserRole", b =>
                {
                    b.HasOne("webapi.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Entities.Clinic", b =>
                {
                    b.Navigation("ClinicDoctors");
                });

            modelBuilder.Entity("API.Models.Entities.DoctorService", b =>
                {
                    b.Navigation("InvoiceDoctorService");
                });

            modelBuilder.Entity("API.Models.Entities.InventoryItem", b =>
                {
                    b.Navigation("SellOrders");

                    b.Navigation("ServiceInventoryItems");

                    b.Navigation("SupplyOrders");
                });

            modelBuilder.Entity("API.Models.Entities.Invoice", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();

                    b.Navigation("CustomItems");

                    b.Navigation("InvoiceDoctorService");

                    b.Navigation("InvoiceMedicines");
                });

            modelBuilder.Entity("API.Models.Entities.InvoiceDoctorService", b =>
                {
                    b.Navigation("InvoiceDoctorServiceSupplyOrders");
                });

            modelBuilder.Entity("API.Models.Entities.Medicine", b =>
                {
                    b.Navigation("InvoiceMedicines");
                });

            modelBuilder.Entity("API.Models.Entities.SellOrder", b =>
                {
                    b.Navigation("SellOrderConsumesSupplyOrders");
                });

            modelBuilder.Entity("API.Models.Entities.Service", b =>
                {
                    b.Navigation("DoctorServices");

                    b.Navigation("ServiceInventoryItems");
                });

            modelBuilder.Entity("API.Models.Entities.SupplyOrder", b =>
                {
                    b.Navigation("InvoiceDoctorServiceSupplyOrders");

                    b.Navigation("SellOrderConsumesSupplyOrders");
                });

            modelBuilder.Entity("HospitalApp.Models.Entities.Speciality", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("InventoryItems");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("webapi.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("webapi.Entities.AppUser", b =>
                {
                    b.Navigation("BookedAppointments");

                    b.Navigation("BookedWithAppointments");

                    b.Navigation("ClinicDoctors");

                    b.Navigation("DoctorServices");

                    b.Navigation("DoctorWorkingHours");

                    b.Navigation("Images");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
